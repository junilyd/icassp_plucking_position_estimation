%%
% This script will recreate the final experiment that estimates guitar string,
% fret and plucking position on a recording with sudden changes of all these positions.
% The script serves the purpose of clearifying the implementation of the
% the proposed method entitled 
% "Estimation of guitar string, fret and plucking position using
% parametric pitch estimation" published at IEEE ICASSP 2019.
%
% It should help the reader understand how to implement the method and
% explain details not mentioned in the theory in the paper.
%
% Along with the script follows a dataset containing recording of electric
% and acoustic guitar, which is used for training and testing in the paper.
%
% If you find this code or data set useful, please cite the paper:
%
% ------------------------------------------------------------------------
% LaTeX citation format:
%
% @inproceedings{hjerrild_icassp2019,
%  title={Estimation of guitar string, fret and plucking position using parametric pitch estimation},
%  author={Hjerrild, Jacob M{\o}ller and Christensen, {Mads Gr\ae sb\o ll}},
%  booktitle= {Proc.\ IEEE Int.\ Conf.\ Acoust., Speech, Signal Process.},
%  year={2019}
%}
% ------------------------------------------------------------------------
% Implemented by Jacob MÃ¸ller at the Audio Analysis Lab, Aalborg University
%  October 2018.
%%
clear all;
addpath(genpath('util'));
mirverbose(0);
addpath mats
%% Load trained model (training data was captured from the 12th fret)
%load ~/repositories/guitar_string_finger_and_pluck_estimation/mats/betaMeanfirebird_40ms_from_12th_fret_betares0.10u_nFFT2^19.mat
load trained_model_of_firebird_from_4th_fret;
%load trained_model_from_12th_fret.mat;
%load trained_model_of_firebird_from_12th_fret;

%% Initialize implementation constants 
% (the constants that are commented out is already defined from the trained model)
segmentDuration = 40e-3; % segment duration in seconds.
LOpen = 64.3; % assumed length of all open strings.
M = 25; % assumed high number of harmonics (M>>1).
MInitial = 5; % number of harmonics for initial harmonic estimate (B=0).
f0Limits = [75 700]; % boundaries for f0 search grid in Hz.
nFFT = 2^19; % Length of  zero-padded FFT.
betaRes = 1e-7; % resolution of search grid for B in m^(-2)
%BSearchGrid = [min(min(BModel)):betaRes:max(max(BModel))]; % searh grid for B. 


%% read in the observed guitar recording and do onset detection
[recordedSignal,fs]=audioread('util/recording_of_plucking_with_sudden_changes.wav');
%soundsc(recordedSignal,fs);
% segment the signal from every onset event (i.e. 40 ms)
[segments, onsetInSeconds] = icassp19_segment_from_all_onsets(recordedSignal,fs,segmentDuration); 

%% Estimate string, fret and plucking position on every 40 ms. segment
for n = 1:size(segments,2)
    % Hilbert transform and windowing
    [x] = icassp19_hilbert_transform(segments(:,n),fs); 
     x = icassp19_apply_gaussian_window(x);

    %% Feature extraction with the inharmonic pitch estimator
    % The implementation of Eq. (17) is done with one FFT, since it is fast
    % Hence, it is equivalent to harmonic summation which the in the proposed 
    % method is extended to inharmonic summation.
    % See details on harmonic summation in Christensen and Jakobsson [27].
    [~,X] = icassp19_fft(x, fs, nFFT);
    f0Initial = icassp19_harmonic_summation(X, f0Limits, MInitial, fs);
    [pitchEstimatePhi, BEstimatePhi] = icassp19_inharmonic_summation(X, f0Initial, M, fs, BSearchGrid,nFFT);
    
    % feature vector computed from the observation and normalized for
    % euclidean distance. We use the trained model as part of normalization.
%phi = [pitchEstimate./max(abs(mu_original_units(:,1))) BEstimate./max(abs(mu_original_units(:,2)))];
phi = [pitchEstimatePhi BEstimatePhi]./normalizationConstant;

%un-normalization
% [mu]  = [muModel].*[normalizationConstant];
% mu(:,1) = log(mu(:,1));
% mu(:,2) = (mu(:,2));
% normalizationConstantClassifier = [max(abs(mu))];
% mu = mu./normalizationConstantClassifier;
% 
% phi = [log(pitchEstimatePhi) (BEstimatePhi)]./normalizationConstantClassifier;
% %    phi = [log(phi(:,1))./max(log(phi(:,1))) (log(phi(:,2).^(1/2)))./max(abs((log(phi(:,2).^(1/2)))))]

    %% Classifation of String and Fret (maximum likelihood w. uniform prior)
    euclideanDistance   =  sqrt( (log(phi(:,1))-log(mu(:,1))).^2 + (phi(:,2)-mu(:,2)).^2 );
    [C,I] = min(euclideanDistance);
    fretEstimate(n) = mod(I,13)-1; % <-- due to a matrix structure (13x6)
    stringEstimate(n) = floor((I+13)/13);
    if fretEstimate(n) == -1, fretEstimate(n)=fretOptions(end-1); stringEstimate(n)=
    %% Estimate the amplitudes (alpha vector)
    Z = icassp19_Z(pitchEstimatePhi,length(x),fs,M,BEstimatePhi);
    alpha = inv(Z'*Z)*Z'*x;
    amplitudesAbs = abs(alpha)'; % absolute values for the estimator

    %% Plucking Position Estimator (minimizer of log spectral distance)
    L = LOpen * 2^(-fretEstimate(n)/12); %
    [pluckCmFromBridge(n)] = icasssp19_plucking_position_estimator_LSD(amplitudesAbs,L);% icasssp19_plucking_position_estimator_LSD
end

%% Plot the results
recordDuration = 12;
timeAxis = [0:1/fs:recordDuration-1/fs];

figure(10); clf
subaxis(3,1,1,'sh',.1,'sv',.3,'mt',0,'pt',0.01);
plot(timeAxis,recordedSignal); ylabel('Ampl.');
set(gca,'xticklabel',[]);
subaxis(3,1,1,'sh',.3,'sv',.01,'pt',0.03,'margin',0.1);
plot(onsetInSeconds(1:n),pluckCmFromBridge(1:n),'x');
ylim([4 32])
set(gca,'xticklabel',[]); ylabel('$\hat{P}$[cm]','interpreter','latex')
grid minor;
subaxis(3,1,2,'sh',.03,'sv',0,'mt',0,'pt',0.09);
for p=1:6
    plot([0,recordDuration],[p,p], 'Color', [0.4 0.4 0.4], 'linewidth',1); hold on;
end
ylim([0.1 6.9]);
for nn = 1:n
    text(onsetInSeconds(nn)-0.2,stringEstimate(nn),sprintf('%1.0f',fretEstimate(nn)),'fontsize', 20)
end
set(gca,'ytick',[1 2 3 4 5 6])
yticklabels({'6','5','4','3','2','1'})
ylabel('String Est.'); xlabel('Time [sec]');

